{{ "\n".join(Imports) }}

{{ Enum }}

{{ DataClass }}

class ApiClient:
    def __init__(self, base_url: str, headers: Optional[Dict[str, str]] = None, ssl_verify: bool = False):
        self.base_url = base_url
        self.headers = headers or {}
        self.ssl_verify = ssl_verify

    def _request(self, method: str, path: str, response_model, response_model_list:bool, **kwargs) -> Any:    
        url = f"{self.base_url}{path}" 
        headers = self.headers.copy()
        headers.update(kwargs.pop("headers", {}))
        response = httpx.request(method, url, headers=headers, verify=self.ssl_verify, **kwargs)
        response.raise_for_status()
        try:
            data = response.json()
        except json.JSONDecodeError:
            data = response.text
        if(response_model == None or response_model == Any):
            return data
        
        if(type(response_model) == type("TypeDefinition") ):
            # Model is a string
            return response_model(data)
        else:
            if(response_model_list):
                return [from_dict(data_class=response_model, data=item) for item in data]
            return from_dict(data_class=response_model, data=data)
    
    {{ Methods }}


